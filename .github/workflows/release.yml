name: Release package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version or major, minor, patch'
        default: 'patch'
        required: true

env:
  GH_BOT_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  GH_BOT_NAME: "GitHub Action"

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build.outputs.version }}
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: https://registry.npmjs.org/
        cache: 'npm'

    - name: Git configuration
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions"

    - name: Build and Tag
      id: build
      run: |
        echo "version: ${{ github.event.inputs.version }}"

        npm ci
        npm version ${{ github.event.inputs.version }} --no-git-tag-version
        VERSION=$(grep '^  "version"' package.json | cut -d'"' -f4)
        echo $VERSION

        if git rev-parse "refs/tags/$VERSION" > /dev/null 2>&1; then
          echo "ðŸ›‘ Tag $VERSION already exists"
          exit 1
        fi

        git add package*.json CHANGELOG.md
        git commit -m "ðŸ”– $VERSION"
        git tag $VERSION

        npm run release-notes -- ${VERSION}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    # Package the required files into a zip
    - name: Package
      run: |
        mkdir ${{ github.event.repository.name }}
        cp ./dist/* ${{ github.event.repository.name }}
        cp -r ./src/* ${{ github.event.repository.name }}
        cp ./README.md ${{ github.event.repository.name }}
        cp ./LICENSE ${{ github.event.repository.name }}
        zip -r ${{ github.event.repository.name }}-${{ steps.build.outputs.version }}.zip ${{ github.event.repository.name }}

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git push origin && git push --tags

        gh release create "${{ steps.build.outputs.version }}" \
          -F ./release-notes.md \
          --title "Release ${{ steps.build.outputs.version }}" \
          --verify-tag

        gh release upload "${{ steps.build.outputs.version }}" --clobber \
          ${{ github.event.repository.name }}-${{ steps.build.outputs.version }}.zip

    - name: Publish to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish --provenance --access public
